set search_path to public;

create extension if not exists "uuid-ossp";

create table if not exists "roles" (
    role_id smallint generated by default as identity primary key,
    role varchar(100) unique not null
);

insert into roles (role) values ('Administrator');
insert into roles (role) values ('Employer');
insert into roles (role) values ('Applicant');

create table if not exists "users" (
    user_id uuid not null default uuid_generate_v4() primary key,
    first_name varchar(70) not null,
    last_name varchar(70) not null,
    email text unique not null,
    password text not null,
    registration_date timestamp not null default timezone('utc-3', current_timestamp(0)),
    is_approved boolean,
    role_id_fk smallint references "roles" (role_id)
);

create or replace function set_approval_flag()
returns trigger as $$
begin
    if new.role_id_fk = (select role_id from "roles" where role = 'Employer') then
        new.is_approved = false;
    else
        new.is_approved = true;
    end if;

    return new;
end;
$$ language plpgsql;

create or replace trigger set_approval_flag_trigger
before insert on "users"
for each row
execute function set_approval_flag();

create table if not exists social_media_links (
    social_media_link_id uuid not null default uuid_generate_v4() primary key,
    github text,
    linkedin text,
    twitter text,
    facebook text,
    user_id_fk uuid references "users" (user_id) on delete cascade
);

create table if not exists resumes (
    resume_id uuid not null default uuid_generate_v4() primary key,
    title varchar(250) not null,
    text text not null,
    visibility varchar(250) not null,
	user_id_fk uuid references "users" (user_id) on delete cascade
);

create table if not exists skills (
    skill_id uuid not null default uuid_generate_v4() primary key,
    resume_id_fk uuid references resumes (resume_id) on delete cascade
);

create table if not exists programming_languages (
    programming_language_id uuid not null default uuid_generate_v4() primary key,
    programming_language varchar(250) not null,
    skill_id_fk uuid references skills (skill_id) on delete cascade
);

create table if not exists experiences (
    experience_id uuid not null default uuid_generate_v4() primary key,
    start_date date,
    end_date date,
    experience real,
    level varchar(50),
    programming_language_id_fk uuid references programming_languages (programming_language_id) on delete cascade
);

create table if not exists companies (
    company_id uuid not null default uuid_generate_v4() primary key,
    name varchar(1000) not null,
    experience_id_fk uuid references experiences (experience_id) on delete cascade
);

create table if not exists teams (
    team_id uuid not null default uuid_generate_v4() primary key,
    name varchar(250) not null,
    —Åreation_date timestamp not null default timezone('utc-3', current_timestamp(0)),
    important_languages varchar(500),
	owner_id_fk uuid references "users" (user_id) on delete cascade
);

create table if not exists team_members (
    member_id uuid not null default uuid_generate_v4() primary key,
		team_id_fk uuid references teams (team_id) on delete cascade,
    user_id_fk uuid references "users" (user_id) on delete cascade,
    status varchar(250) not null
);

create table if not exists chats (
    chat_id uuid not null default uuid_generate_v4() primary key,
    name varchar(250) not null,
	type varchar(100) not null,
	team_id_fk uuid references teams (team_id) on delete cascade
);

create table if not exists messages (
    message_id uuid not null default uuid_generate_v4() primary key,
    text varchar(1000) not null,
    created_date timestamp not null default timezone('utc-3', current_timestamp(0)),
	user_id_fk uuid references "users" (user_id) on delete cascade,
    chat_id_fk uuid references chats (chat_id) on delete cascade
);

create table if not exists chat_users (
    chat_id uuid references chats(chat_id) on delete cascade,
    user_id uuid references users(user_id) on delete cascade,
    primary key (chat_id, user_id)
);